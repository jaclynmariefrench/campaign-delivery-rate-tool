(function (React, designSystem, adminjs, reactRouter) {
  'use strict';

  function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

  var React__default = /*#__PURE__*/_interopDefault(React);

  // just some regular React component
  const MyInputComponent = () => /*#__PURE__*/React__default.default.createElement("input", null);

  function RatingRuleForm() {
    const [formData, setFormData] = React.useState({
      name: "",
      condition: "",
      minValue: "",
      maxValue: "",
      score: ""
    });
    const [showMaxValue, setShowMaxValue] = React.useState(false);
    const addNotice = adminjs.useNotice();
    const handleInputChange = e => {
      const {
        name,
        value
      } = e.target;
      setFormData(prevState => ({
        ...prevState,
        [name]: value
      }));
      if (name === "condition") {
        setShowMaxValue(value === "Between");
      }
    };
    const handleSelectChange = name => selectedOption => {
      const value = selectedOption ? selectedOption.value : "";
      setFormData(prevState => ({
        ...prevState,
        [name]: value
      }));
      if (name === "condition") {
        setShowMaxValue(value === "Between");
      }
    };
    const handleSubmit = e => {
      e.preventDefault();
      const formDataObj = new FormData();
      for (const key in formData) {
        formDataObj.append(key, formData[key]);
      }
      fetch("/admin/api/resources/RatingRule/actions/new", {
        method: "POST",
        body: formDataObj
      }).then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      }).then(data => {
        console.log("Success:", data);
        addNotice({
          message: 'RatingRule submitted successfully!',
          type: 'success'
        });
        // Redirect after a short delay to ensure the message is shown
        setTimeout(() => {
          window.location.assign("/admin/resources/RatingRule");
        }, 2000); // Adjust the delay time as needed
      }).catch(error => {
        console.error("Error:", error);
        addNotice({
          message: `Error submitting RatingRule: ${error.message}`,
          type: 'error'
        });
      });
    };
    const getOptions = name => {
      const options = {
        name: [{
          value: "Delivery Rate",
          label: "Delivery Rate"
        }, {
          value: "Open Rate",
          label: "Open Rate"
        }, {
          value: "Click Rate",
          label: "Click Rate"
        }, {
          value: "Unsubscribe Rate",
          label: "Unsubscribe Rate"
        }, {
          value: "Complaint Rate",
          label: "Complaint Rate"
        }],
        condition: [{
          value: "Between",
          label: "Between"
        }, {
          value: "<",
          label: "<"
        }, {
          value: "<=",
          label: "<="
        }, {
          value: ">",
          label: ">"
        }, {
          value: ">=",
          label: ">="
        }, {
          value: "===",
          label: "==="
        }]
      };
      return options[name] || [];
    };
    const getOption = (name, value) => {
      return getOptions(name).find(option => option.value === value) || null;
    };
    const inputContainer = {
      marginBottom: "2.5rem"
    };
    const buttonContainer = {
      display: "flex",
      justifyContent: "space-around",
      padding: "0px 32px 32px",
      border: "none"
    };
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      as: "form",
      onSubmit: handleSubmit
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      variant: "white"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      style: inputContainer
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
      htmlFor: "name"
    }, "Name"), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
      id: "name",
      name: "name",
      value: getOption("name", formData.name),
      onChange: handleSelectChange("name"),
      options: getOptions("name"),
      isClearable: true
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      style: inputContainer
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
      htmlFor: "condition"
    }, "Condition"), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
      id: "condition",
      name: "condition",
      value: getOption("condition", formData.condition),
      onChange: handleSelectChange("condition"),
      options: getOptions("condition"),
      isClearable: true
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      style: inputContainer
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
      htmlFor: "minValue"
    }, showMaxValue ? "Min Value" : "Value"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      id: "minValue",
      name: "minValue",
      value: formData.minValue,
      onChange: handleInputChange,
      width: 1
    }), showMaxValue && /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
      htmlFor: "maxValue"
    }, "Max Value"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      id: "maxValue",
      name: "maxValue",
      value: formData.maxValue,
      onChange: handleInputChange,
      width: 1
    }))), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      style: inputContainer
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
      htmlFor: "score"
    }, "Score"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      id: "score",
      name: "score",
      value: formData.score,
      onChange: handleInputChange,
      width: 1
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Section, {
      style: buttonContainer
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      variant: "contained",
      type: "submit"
    }, "Submit"))));
  }

  // Function to convert condition to HTML entity
  const conditionToEntity = condition => {
    switch (condition) {
      case "<":
        return "&lt;";
      case ">":
        return "&gt;";
      case "<=":
        return "&le;";
      case ">=":
        return "&ge;";
      case "===":
        return "===";
      // No need for conversion
      default:
        return condition;
      // For 'Between' or any other condition
    }
  };

  // Component to display the badge with the correct entity
  const ConditionBadge = ({
    record
  }) => {
    const condition = record.params.condition;
    const entity = conditionToEntity(condition);
    return /*#__PURE__*/React__default.default.createElement(designSystem.Badge, {
      dangerouslySetInnerHTML: {
        __html: entity
      }
    });
  };

  const ConditionShow = props => {
    const {
      property,
      record
    } = props;
    const {
      translateProperty
    } = adminjs.useTranslation();
    return /*#__PURE__*/React__default.default.createElement(designSystem.ValueGroup, {
      label: translateProperty(property.label, property.resourceId)
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Section, {
      style: {
        border: "none"
      }
    }, /*#__PURE__*/React__default.default.createElement(ConditionBadge, {
      record: record
    })));
  };

  const ResetPasswordForm = () => {
    const [password, setPassword] = React.useState("");
    const [message, setMessage] = React.useState("");
    const {
      token
    } = reactRouter.useParams();
    const handleSubmit = async e => {
      e.preventDefault();
      try {
        const response = await fetch(`http://localhost:3000/reset/${token}`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            password
          })
        });
        const data = await response.text();
        setMessage(data);
      } catch (error) {
        setMessage("Error sending resetting password");
      }
    };
    return /*#__PURE__*/React__default.default.createElement("div", null, /*#__PURE__*/React__default.default.createElement("h2", null, "Reset Password"), /*#__PURE__*/React__default.default.createElement("form", {
      onSubmit: handleSubmit
    }, /*#__PURE__*/React__default.default.createElement("div", null, /*#__PURE__*/React__default.default.createElement("label", null, "New Password:"), /*#__PURE__*/React__default.default.createElement("input", {
      type: "password",
      value: password,
      onChange: e => setPassword(e.target.value),
      required: true
    })), /*#__PURE__*/React__default.default.createElement("button", {
      type: "submit"
    }, "Reset Password")), message && /*#__PURE__*/React__default.default.createElement("p", null, message));
  };

  const CustomLogin = props => {
    const {
      action,
      message
    } = props;
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      variant: "grey"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      variant: "white",
      boxShadow: "card",
      width: [1, 2 / 3, 1 / 3],
      mx: "auto",
      my: "xl"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      p: "lg"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Illustration, {
      variant: "Rocket"
    }), /*#__PURE__*/React__default.default.createElement(designSystem.H2, null, "Welcome to Travis Admin"), /*#__PURE__*/React__default.default.createElement(designSystem.Text, null, "Log in to your account"), message && /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      variant: "danger"
    }, message), /*#__PURE__*/React__default.default.createElement("form", {
      action: action,
      method: "POST"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.FormGroup, null, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "Email"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      name: "email",
      type: "email",
      required: true
    })), /*#__PURE__*/React__default.default.createElement(designSystem.FormGroup, null, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "Password"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      name: "password",
      type: "password",
      required: true
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      variant: "primary",
      type: "submit",
      mt: "lg",
      width: 1
    }, "Log in")), /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      mt: "lg"
    }, "Need help? ", /*#__PURE__*/React__default.default.createElement("a", {
      href: "/admin/forgot-password"
    }, "Forgot Password?")))));
  };

  AdminJS.UserComponents = {};
  AdminJS.UserComponents.MyInput = MyInputComponent;
  AdminJS.UserComponents.RatingRuleForm = RatingRuleForm;
  AdminJS.UserComponents.ConditionBadge = ConditionBadge;
  AdminJS.UserComponents.ConditionShow = ConditionShow;
  AdminJS.UserComponents.ResetPasswordForm = ResetPasswordForm;
  AdminJS.UserComponents.CustomLogin = CustomLogin;
  AdminJS.UserComponents.Login = CustomLogin;

})(React, AdminJSDesignSystem, AdminJS, ReactRouter);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
