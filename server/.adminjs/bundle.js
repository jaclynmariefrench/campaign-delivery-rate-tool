(function (React, designSystem) {
  'use strict';

  function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

  var React__default = /*#__PURE__*/_interopDefault(React);

  // just some regular React component
  const MyInputComponent = () => /*#__PURE__*/React__default.default.createElement("input", null);

  // just some regular React component
  function RatingRuleForm() {
    const [formData, setFormData] = React.useState({
      name: "",
      condition: "",
      minValue: "",
      maxValue: "",
      score: ""
    });
    const [showMaxValue, setShowMaxValue] = React.useState(false);
    const handleInputChange = e => {
      const {
        name,
        value
      } = e.target;
      setFormData(prevState => ({
        ...prevState,
        [name]: value
      }));
      if (name === "condition") {
        setShowMaxValue(value === "Between");
      }
    };
    const handleSelectChange = name => selectedOption => {
      const value = selectedOption ? selectedOption.value : "";
      setFormData(prevState => ({
        ...prevState,
        [name]: value
      }));
      if (name === "condition") {
        setShowMaxValue(value === "Between");
      }
    };
    const handleSubmit = e => {
      e.preventDefault();
      console.log(formData);
      const formDataObj = new FormData();
      for (const key in formData) {
        formDataObj.append(key, formData[key]);
      }
      fetch("/admin/api/resources/RatingRule/actions/new", {
        method: "POST",
        body: formDataObj
      }).then(response => response.json()).then(data => {
        console.log("Success:", data);
      }).catch(error => {
        console.error("Error:", error);
      });
    };
    const getOptions = name => {
      const options = {
        name: [{
          value: "Delivery Rate",
          label: "Delivery Rate"
        }, {
          value: "Open Rate",
          label: "Open Rate"
        }, {
          value: "Click Rate",
          label: "Click Rate"
        }, {
          value: "Unsubscribe Rate",
          label: "Unsubscribe Rate"
        }, {
          value: "Complaint Rate",
          label: "Complaint Rate"
        }],
        condition: [{
          value: "Between",
          label: "Between"
        }, {
          value: "<",
          label: "<"
        }, {
          value: "<=",
          label: "<="
        }, {
          value: ">",
          label: ">"
        }, {
          value: ">=",
          label: ">="
        }, {
          value: "===",
          label: "==="
        }]
      };
      return options[name] || [];
    };
    const getOption = (name, value) => {
      return getOptions(name).find(option => option.value === value) || null;
    };
    const inputContainer = {
      marginBottom: "2.5rem"
    };
    const buttonContainer = {
      display: "flex",
      justifyContent: "space-around",
      padding: "0px 32px 32px",
      border: "none"
    };
    return /*#__PURE__*/React__default.default.createElement(designSystem.Section, null, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      variant: "gray"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Header.H2, null, "Some header")), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      as: "form",
      onSubmit: handleSubmit
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      variant: "white"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      style: inputContainer
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
      htmlFor: "name"
    }, "Name"), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
      id: "name",
      name: "name",
      value: getOption("name", formData.name),
      onChange: handleSelectChange("name"),
      options: getOptions("name"),
      isClearable: true
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      style: inputContainer
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
      htmlFor: "condition"
    }, "Condition"), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
      id: "condition",
      name: "condition",
      value: getOption("condition", formData.condition),
      onChange: handleSelectChange("condition"),
      options: getOptions("condition"),
      isClearable: true
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      style: inputContainer
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
      htmlFor: "minValue"
    }, showMaxValue ? "Min Value" : "Value"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      id: "minValue",
      name: "minValue",
      value: formData.minValue,
      onChange: handleInputChange,
      width: 1
    }), showMaxValue && /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
      htmlFor: "maxValue"
    }, "Max Value"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      id: "maxValue",
      name: "maxValue",
      value: formData.maxValue,
      onChange: handleInputChange,
      width: 1
    }))), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      style: inputContainer
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
      htmlFor: "score"
    }, "Score"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      id: "score",
      name: "score",
      value: formData.score,
      onChange: handleInputChange,
      width: 1
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Section, {
      style: buttonContainer
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      variant: "contained",
      type: "submit"
    }, "Submit")))));
  }

  // Function to convert condition to HTML entity
  const conditionToEntity = condition => {
    switch (condition) {
      case "<":
        return "&lt;";
      case ">":
        return "&gt;";
      case "<=":
        return "&le;";
      case ">=":
        return "&ge;";
      case "===":
        return "===";
      // No need for conversion
      default:
        return condition;
      // For 'Between' or any other condition
    }
  };

  // Component to display the badge with the correct entity
  const ConditionBadge = ({
    record
  }) => {
    const condition = record.params.condition;
    const entity = conditionToEntity(condition);
    return /*#__PURE__*/React__default.default.createElement(designSystem.Badge, {
      dangerouslySetInnerHTML: {
        __html: entity
      }
    });
  };

  AdminJS.UserComponents = {};
  AdminJS.UserComponents.MyInput = MyInputComponent;
  AdminJS.UserComponents.RatingRuleForm = RatingRuleForm;
  AdminJS.UserComponents.ConditionBadge = ConditionBadge;

})(React, AdminJSDesignSystem);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
