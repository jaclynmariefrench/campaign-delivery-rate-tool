(function (React, designSystem) {
  'use strict';

  function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

  var React__default = /*#__PURE__*/_interopDefault(React);

  // just some regular React component
  const MyInputComponent = () => /*#__PURE__*/React__default.default.createElement("input", null);

  // just some regular React component
  function RatingRuleForm() {
    const [formData, setFormData] = React.useState({
      name: "",
      condition: "",
      minValue: "",
      maxValue: "",
      score: ""
    });
    const [showMaxValue, setShowMaxValue] = React.useState(false);
    const handleInputChange = e => {
      const {
        name,
        value
      } = e.target;
      console.log(`Input Change - Name: ${name}, Value: ${value}`);
      setFormData(prevState => ({
        ...prevState,
        [name]: value
      }));
      if (name === "condition") {
        setShowMaxValue(value === "Between");
      }
    };
    const handleSelectChange = name => selectedOption => {
      const value = selectedOption.value;
      console.log(`Select Change - Name: ${name}, Value: ${value}`);
      setFormData(prevState => ({
        ...prevState,
        [name]: value
      }));
      if (name === "condition") {
        setShowMaxValue(value === "Between");
      }
    };
    const handleSubmit = e => {
      e.preventDefault();
      console.log(formData);
    };
    const getOptions = name => {
      const options = {
        name: [{
          value: "Delivery Rate",
          label: "Delivery Rate"
        }, {
          value: "Open Rate",
          label: "Open Rate"
        }, {
          value: "Click Rate",
          label: "Click Rate"
        }, {
          value: "Unsubscribe Rate",
          label: "Unsubscribe Rate"
        }, {
          value: "Complaint Rate",
          label: "Complaint Rate"
        }],
        condition: [{
          value: "Between",
          label: "Between"
        }, {
          value: "<",
          label: "<"
        }, {
          value: "<=",
          label: "<="
        }, {
          value: ">",
          label: ">"
        }, {
          value: ">=",
          label: ">="
        }, {
          value: "===",
          label: "==="
        }]
      };
      return options[name] || [];
    };
    const getOption = (name, value) => {
      return getOptions(name).find(option => option.value === value) || null;
    };
    const inputContainer = {
      marginBottom: '2.5rem'
    };
    const buttonContainer = {
      display: 'flex',
      justifyContent: 'space-around',
      padding: '0px 32px 32px',
      border: 'none'
    };
    return /*#__PURE__*/React__default.default.createElement(designSystem.Section, null, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      variant: "gray"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Header.H2, null, "Some header")), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      as: "form",
      onSubmit: handleSubmit
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      variant: "white"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      style: inputContainer
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
      htmlFor: "name"
    }, "Name"), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
      id: "name",
      name: "name",
      value: getOption("name", formData.name),
      onChange: handleSelectChange("name"),
      options: getOptions("name")
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      style: inputContainer
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
      htmlFor: "condition"
    }, "Condition"), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
      id: "condition",
      name: "condition",
      value: getOption("condition", formData.condition),
      onChange: handleSelectChange("condition"),
      options: getOptions("condition")
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      style: inputContainer
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
      htmlFor: "minValue"
    }, "Min Value"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      id: "minValue",
      name: "minValue",
      value: formData.minValue,
      onChange: handleInputChange,
      width: 1
    }), showMaxValue && /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
      htmlFor: "maxValue"
    }, "Max Value"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      id: "maxValue",
      name: "maxValue",
      value: formData.maxValue,
      onChange: handleInputChange,
      width: 1
    }))), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      style: inputContainer
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
      htmlFor: "score"
    }, "Score"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      id: "score",
      name: "score",
      value: formData.score,
      onChange: handleInputChange,
      width: 1
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Section, {
      style: buttonContainer
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      variant: "contained",
      type: "submit"
    }, "Submit")))));
  }

  AdminJS.UserComponents = {};
  AdminJS.UserComponents.MyInput = MyInputComponent;
  AdminJS.UserComponents.RatingRuleForm = RatingRuleForm;

})(React, AdminJSDesignSystem);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi9hZG1pbmpzL215LWlucHV0LmpzeCIsIi4uL2FkbWluanMvcmF0aW5nUnVsZUZvcm0uanN4IiwiZW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG4vLyBqdXN0IHNvbWUgcmVndWxhciBSZWFjdCBjb21wb25lbnRcbmNvbnN0IE15SW5wdXRDb21wb25lbnQgPSAoKSA9PiA8aW5wdXQvPlxuXG5leHBvcnQgZGVmYXVsdCBNeUlucHV0Q29tcG9uZW50IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQge1xuICBCb3gsXG4gIExhYmVsLFxuICBJbnB1dCxcbiAgQnV0dG9uLFxuICBTZWxlY3QsXG4gIEhlYWRlcixcbiAgU2VjdGlvbixcbn0gZnJvbSBcIkBhZG1pbmpzL2Rlc2lnbi1zeXN0ZW1cIjtcblxuXG4vLyBqdXN0IHNvbWUgcmVndWxhciBSZWFjdCBjb21wb25lbnRcbmZ1bmN0aW9uIFJhdGluZ1J1bGVGb3JtKCkge1xuICBjb25zdCBbZm9ybURhdGEsIHNldEZvcm1EYXRhXSA9IHVzZVN0YXRlKHtcbiAgICBuYW1lOiBcIlwiLFxuICAgIGNvbmRpdGlvbjogXCJcIixcbiAgICBtaW5WYWx1ZTogXCJcIixcbiAgICBtYXhWYWx1ZTogXCJcIixcbiAgICBzY29yZTogXCJcIixcbiAgfSk7XG5cbiAgY29uc3QgW3Nob3dNYXhWYWx1ZSwgc2V0U2hvd01heFZhbHVlXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCBoYW5kbGVJbnB1dENoYW5nZSA9IChlKSA9PiB7XG4gICAgY29uc3QgeyBuYW1lLCB2YWx1ZSB9ID0gZS50YXJnZXQ7XG4gICAgY29uc29sZS5sb2coYElucHV0IENoYW5nZSAtIE5hbWU6ICR7bmFtZX0sIFZhbHVlOiAke3ZhbHVlfWApO1xuICAgIHNldEZvcm1EYXRhKChwcmV2U3RhdGUpID0+ICh7XG4gICAgICAuLi5wcmV2U3RhdGUsXG4gICAgICBbbmFtZV06IHZhbHVlLFxuICAgIH0pKTtcblxuICAgIGlmIChuYW1lID09PSBcImNvbmRpdGlvblwiKSB7XG4gICAgICBzZXRTaG93TWF4VmFsdWUodmFsdWUgPT09IFwiQmV0d2VlblwiKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlU2VsZWN0Q2hhbmdlID0gKG5hbWUpID0+IChzZWxlY3RlZE9wdGlvbikgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gc2VsZWN0ZWRPcHRpb24udmFsdWU7XG4gICAgY29uc29sZS5sb2coYFNlbGVjdCBDaGFuZ2UgLSBOYW1lOiAke25hbWV9LCBWYWx1ZTogJHt2YWx1ZX1gKTtcbiAgICBzZXRGb3JtRGF0YSgocHJldlN0YXRlKSA9PiAoe1xuICAgICAgLi4ucHJldlN0YXRlLFxuICAgICAgW25hbWVdOiB2YWx1ZSxcbiAgICB9KSk7XG5cbiAgICBpZiAobmFtZSA9PT0gXCJjb25kaXRpb25cIikge1xuICAgICAgc2V0U2hvd01heFZhbHVlKHZhbHVlID09PSBcIkJldHdlZW5cIik7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZVN1Ym1pdCA9IChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnNvbGUubG9nKGZvcm1EYXRhKTtcbiAgfTtcblxuICBjb25zdCBnZXRPcHRpb25zID0gKG5hbWUpID0+IHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgbmFtZTogW1xuICAgICAgICB7IHZhbHVlOiBcIkRlbGl2ZXJ5IFJhdGVcIiwgbGFiZWw6IFwiRGVsaXZlcnkgUmF0ZVwiIH0sXG4gICAgICAgIHsgdmFsdWU6IFwiT3BlbiBSYXRlXCIsIGxhYmVsOiBcIk9wZW4gUmF0ZVwiIH0sXG4gICAgICAgIHsgdmFsdWU6IFwiQ2xpY2sgUmF0ZVwiLCBsYWJlbDogXCJDbGljayBSYXRlXCIgfSxcbiAgICAgICAgeyB2YWx1ZTogXCJVbnN1YnNjcmliZSBSYXRlXCIsIGxhYmVsOiBcIlVuc3Vic2NyaWJlIFJhdGVcIiB9LFxuICAgICAgICB7IHZhbHVlOiBcIkNvbXBsYWludCBSYXRlXCIsIGxhYmVsOiBcIkNvbXBsYWludCBSYXRlXCIgfSxcbiAgICAgIF0sXG4gICAgICBjb25kaXRpb246IFtcbiAgICAgICAgeyB2YWx1ZTogXCJCZXR3ZWVuXCIsIGxhYmVsOiBcIkJldHdlZW5cIiB9LFxuICAgICAgICB7IHZhbHVlOiBcIjxcIiwgbGFiZWw6IFwiPFwiIH0sXG4gICAgICAgIHsgdmFsdWU6IFwiPD1cIiwgbGFiZWw6IFwiPD1cIiB9LFxuICAgICAgICB7IHZhbHVlOiBcIj5cIiwgbGFiZWw6IFwiPlwiIH0sXG4gICAgICAgIHsgdmFsdWU6IFwiPj1cIiwgbGFiZWw6IFwiPj1cIiB9LFxuICAgICAgICB7IHZhbHVlOiBcIj09PVwiLCBsYWJlbDogXCI9PT1cIiB9LFxuICAgICAgXSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIG9wdGlvbnNbbmFtZV0gfHwgW107XG4gIH07XG5cbiAgY29uc3QgZ2V0T3B0aW9uID0gKG5hbWUsIHZhbHVlKSA9PiB7XG4gICAgcmV0dXJuIGdldE9wdGlvbnMobmFtZSkuZmluZCgob3B0aW9uKSA9PiBvcHRpb24udmFsdWUgPT09IHZhbHVlKSB8fCBudWxsO1xuICB9O1xuXG4gIGNvbnN0IGlucHV0Q29udGFpbmVyID0ge1xuICAgIG1hcmdpbkJvdHRvbTogJzIuNXJlbScsXG4gIH1cblxuICBjb25zdCBidXR0b25Db250YWluZXIgPSB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYXJvdW5kJyxcbiAgICBwYWRkaW5nOiAnMHB4IDMycHggMzJweCcsXG4gICAgYm9yZGVyOiAnbm9uZScsXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxTZWN0aW9uPlxuICAgICAgPEJveCB2YXJpYW50PVwiZ3JheVwiPlxuICAgICAgICA8SGVhZGVyLkgyPlNvbWUgaGVhZGVyPC9IZWFkZXIuSDI+XG4gICAgICA8L0JveD5cbiAgICAgIDxCb3ggYXM9XCJmb3JtXCIgb25TdWJtaXQ9e2hhbmRsZVN1Ym1pdH0+XG4gICAgICAgIDxCb3ggdmFyaWFudD1cIndoaXRlXCI+XG4gICAgICAgICAgPEJveCBzdHlsZT17aW5wdXRDb250YWluZXJ9PlxuICAgICAgICAgICAgPExhYmVsIGh0bWxGb3I9XCJuYW1lXCI+TmFtZTwvTGFiZWw+XG4gICAgICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgICAgIGlkPVwibmFtZVwiXG4gICAgICAgICAgICAgIG5hbWU9XCJuYW1lXCJcbiAgICAgICAgICAgICAgdmFsdWU9e2dldE9wdGlvbihcIm5hbWVcIiwgZm9ybURhdGEubmFtZSl9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVTZWxlY3RDaGFuZ2UoXCJuYW1lXCIpfVxuICAgICAgICAgICAgICBvcHRpb25zPXtnZXRPcHRpb25zKFwibmFtZVwiKX0gLz5cbiAgICAgICAgICA8L0JveD5cbiAgICAgICAgICA8Qm94IHN0eWxlPXtpbnB1dENvbnRhaW5lcn0+XG4gICAgICAgICAgICA8TGFiZWwgaHRtbEZvcj1cImNvbmRpdGlvblwiPkNvbmRpdGlvbjwvTGFiZWw+XG4gICAgICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgICAgIGlkPVwiY29uZGl0aW9uXCJcbiAgICAgICAgICAgICAgbmFtZT1cImNvbmRpdGlvblwiXG4gICAgICAgICAgICAgIHZhbHVlPXtnZXRPcHRpb24oXCJjb25kaXRpb25cIiwgZm9ybURhdGEuY29uZGl0aW9uKX1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZVNlbGVjdENoYW5nZShcImNvbmRpdGlvblwiKX1cbiAgICAgICAgICAgICAgb3B0aW9ucz17Z2V0T3B0aW9ucyhcImNvbmRpdGlvblwiKX0gLz5cbiAgICAgICAgICA8L0JveD5cbiAgICAgICAgICA8Qm94IHN0eWxlPXtpbnB1dENvbnRhaW5lcn0+XG4gICAgICAgICAgICA8TGFiZWwgaHRtbEZvcj1cIm1pblZhbHVlXCI+TWluIFZhbHVlPC9MYWJlbD5cbiAgICAgICAgICAgIDxJbnB1dFxuICAgICAgICAgICAgICBpZD1cIm1pblZhbHVlXCJcbiAgICAgICAgICAgICAgbmFtZT1cIm1pblZhbHVlXCJcbiAgICAgICAgICAgICAgdmFsdWU9e2Zvcm1EYXRhLm1pblZhbHVlfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlSW5wdXRDaGFuZ2V9XG4gICAgICAgICAgICAgIHdpZHRoPXsxfSAvPlxuICAgICAgICAgICAge3Nob3dNYXhWYWx1ZSAmJiAoXG4gICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgPExhYmVsIGh0bWxGb3I9XCJtYXhWYWx1ZVwiPk1heCBWYWx1ZTwvTGFiZWw+XG4gICAgICAgICAgICAgICAgPElucHV0XG4gICAgICAgICAgICAgICAgICBpZD1cIm1heFZhbHVlXCJcbiAgICAgICAgICAgICAgICAgIG5hbWU9XCJtYXhWYWx1ZVwiXG4gICAgICAgICAgICAgICAgICB2YWx1ZT17Zm9ybURhdGEubWF4VmFsdWV9XG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlSW5wdXRDaGFuZ2V9XG4gICAgICAgICAgICAgICAgICB3aWR0aD17MX0gLz5cbiAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvQm94PlxuICAgICAgICAgIDxCb3ggc3R5bGU9e2lucHV0Q29udGFpbmVyfT5cbiAgICAgICAgICAgIDxMYWJlbCBodG1sRm9yPVwic2NvcmVcIj5TY29yZTwvTGFiZWw+XG4gICAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgICAgaWQ9XCJzY29yZVwiXG4gICAgICAgICAgICAgIG5hbWU9XCJzY29yZVwiXG4gICAgICAgICAgICAgIHZhbHVlPXtmb3JtRGF0YS5zY29yZX1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUlucHV0Q2hhbmdlfVxuICAgICAgICAgICAgICB3aWR0aD17MX0gLz5cbiAgICAgICAgICA8L0JveD5cbiAgICAgICAgICA8U2VjdGlvbiBzdHlsZT17YnV0dG9uQ29udGFpbmVyfT5cbiAgICAgICAgICAgIDxCdXR0b24gdmFyaWFudD1cImNvbnRhaW5lZFwiIHR5cGU9XCJzdWJtaXRcIj5cbiAgICAgICAgICAgICAgU3VibWl0XG4gICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICA8L1NlY3Rpb24+XG4gICAgICAgIDwvQm94PlxuICAgICAgPC9Cb3g+XG4gICAgPC9TZWN0aW9uPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBSYXRpbmdSdWxlRm9ybTtcbiIsIkFkbWluSlMuVXNlckNvbXBvbmVudHMgPSB7fVxuaW1wb3J0IE15SW5wdXQgZnJvbSAnLi4vYWRtaW5qcy9teS1pbnB1dCdcbkFkbWluSlMuVXNlckNvbXBvbmVudHMuTXlJbnB1dCA9IE15SW5wdXRcbmltcG9ydCBSYXRpbmdSdWxlRm9ybSBmcm9tICcuLi9hZG1pbmpzL3JhdGluZ1J1bGVGb3JtJ1xuQWRtaW5KUy5Vc2VyQ29tcG9uZW50cy5SYXRpbmdSdWxlRm9ybSA9IFJhdGluZ1J1bGVGb3JtIl0sIm5hbWVzIjpbIk15SW5wdXRDb21wb25lbnQiLCJSZWFjdCIsImNyZWF0ZUVsZW1lbnQiLCJSYXRpbmdSdWxlRm9ybSIsImZvcm1EYXRhIiwic2V0Rm9ybURhdGEiLCJ1c2VTdGF0ZSIsIm5hbWUiLCJjb25kaXRpb24iLCJtaW5WYWx1ZSIsIm1heFZhbHVlIiwic2NvcmUiLCJzaG93TWF4VmFsdWUiLCJzZXRTaG93TWF4VmFsdWUiLCJoYW5kbGVJbnB1dENoYW5nZSIsImUiLCJ2YWx1ZSIsInRhcmdldCIsImNvbnNvbGUiLCJsb2ciLCJwcmV2U3RhdGUiLCJoYW5kbGVTZWxlY3RDaGFuZ2UiLCJzZWxlY3RlZE9wdGlvbiIsImhhbmRsZVN1Ym1pdCIsInByZXZlbnREZWZhdWx0IiwiZ2V0T3B0aW9ucyIsIm9wdGlvbnMiLCJsYWJlbCIsImdldE9wdGlvbiIsImZpbmQiLCJvcHRpb24iLCJpbnB1dENvbnRhaW5lciIsIm1hcmdpbkJvdHRvbSIsImJ1dHRvbkNvbnRhaW5lciIsImRpc3BsYXkiLCJqdXN0aWZ5Q29udGVudCIsInBhZGRpbmciLCJib3JkZXIiLCJTZWN0aW9uIiwiQm94IiwidmFyaWFudCIsIkhlYWRlciIsIkgyIiwiYXMiLCJvblN1Ym1pdCIsInN0eWxlIiwiTGFiZWwiLCJodG1sRm9yIiwiU2VsZWN0IiwiaWQiLCJvbkNoYW5nZSIsIklucHV0Iiwid2lkdGgiLCJGcmFnbWVudCIsIkJ1dHRvbiIsInR5cGUiLCJBZG1pbkpTIiwiVXNlckNvbXBvbmVudHMiLCJNeUlucHV0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0VBRUE7RUFDQSxNQUFNQSxnQkFBZ0IsR0FBR0EsbUJBQU1DLHNCQUFBLENBQUFDLGFBQUEsY0FBTyxDQUFDOztFQ1N2QztFQUNBLFNBQVNDLGNBQWNBLEdBQUc7RUFDeEIsRUFBQSxNQUFNLENBQUNDLFFBQVEsRUFBRUMsV0FBVyxDQUFDLEdBQUdDLGNBQVEsQ0FBQztFQUN2Q0MsSUFBQUEsSUFBSSxFQUFFLEVBQUU7RUFDUkMsSUFBQUEsU0FBUyxFQUFFLEVBQUU7RUFDYkMsSUFBQUEsUUFBUSxFQUFFLEVBQUU7RUFDWkMsSUFBQUEsUUFBUSxFQUFFLEVBQUU7RUFDWkMsSUFBQUEsS0FBSyxFQUFFLEVBQUE7RUFDVCxHQUFDLENBQUMsQ0FBQTtJQUVGLE1BQU0sQ0FBQ0MsWUFBWSxFQUFFQyxlQUFlLENBQUMsR0FBR1AsY0FBUSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBRXZELE1BQU1RLGlCQUFpQixHQUFJQyxDQUFDLElBQUs7TUFDL0IsTUFBTTtRQUFFUixJQUFJO0VBQUVTLE1BQUFBLEtBQUFBO09BQU8sR0FBR0QsQ0FBQyxDQUFDRSxNQUFNLENBQUE7TUFDaENDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLENBQUEscUJBQUEsRUFBd0JaLElBQUksQ0FBWVMsU0FBQUEsRUFBQUEsS0FBSyxFQUFFLENBQUMsQ0FBQTtNQUM1RFgsV0FBVyxDQUFFZSxTQUFTLEtBQU07RUFDMUIsTUFBQSxHQUFH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
